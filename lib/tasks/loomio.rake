namespace :loomio do
  task generate_test_error: :environment do
    raise "this is a generated test error"
  end

  task :version do
    puts Loomio::Version.current
  end

  task generate_static_error_pages: :environment do
    [400, 404, 403, 410, 417, 422, 429, 500].each do |code|
      ['html'].each do |format|
        File.open("public/#{code}.#{format}", "w") do |f|
          if format == "html"
            f << "<!-- This file is automatically generated by rake loomio:generate_static_error_pages -->\n"
            f << "<!-- Don't make changes here; they will be overwritten. -->\n"
          end
          f << ApplicationController.new.render_to_string(
            locals: {
              '@title': I18n.t("errors.#{code}.title"),
              '@body': I18n.t("errors.#{code}.body"),
            },
            template: "application/error",
            layout: "basic",
            format: format
          )
        end
      end
    end
  end

  task migrate_paperclip: :environment do
    Rails.application.eager_load!
    MigrateEventsService.migrate_paperclip
  end

  task hourly_tasks: :environment do
    ThrottleService.reset!('hour')
    PollService.delay.expire_lapsed_polls
    PollService.delay.publish_closing_soon
    TaskService.delay.send_task_reminders

    SendDailyCatchUpEmailWorker.perform_async

    if (Time.now.hour == 0)
      ThrottleService.reset!('day')
      OutcomeService.delay.publish_review_due
      UsageReportService.send
      ExamplePollService.delay.cleanup
      LoginToken.where("created_at < ?", 24.hours.ago).delete_all
    end
  end

  task delete_expired_records: :environment do
    Group.expired_demo.delete_all
    Group.expired_trial.delete_all
    Group.empty_no_subscription.delete_all

    Membership.dangling.delete_all
    MembershipRequest.dangling.delete_all
    Discussion.dangling.delete_all
    DiscussionReader.dangling.delete_all
    SearchVector.dangling.delete_all
    Comment.dangling.delete_all
    Poll.dangling.delete_all
    PollOption.dangling.delete_all
    Stance.dangling.delete_all
    StanceChoice.dangling.delete_all
    Outcome.dangling.delete_all
    Event.dangling.delete_all
    Notification.dangling.delete_all

    PaperTrail::Version.where(item_type: 'Motion').delete_all
    ["Comment", "Discussion", "Group", "Membership", "Outcome", "Poll", "Stance", "User"].each do |model|
      table = model.pluralize.downcase
      puts PaperTrail::Version.joins("left join #{table} on #{table}.id = item_id and item_type = '#{model}'").where("#{table}.id is null").to_sql
      puts PaperTrail::Version.joins("left join #{table} on #{table}.id = item_id and item_type = '#{model}'").where("#{table}.id is null").count
      PaperTrail::Version.joins("left join #{table} on #{table}.id = item_id and item_type = '#{model}'").where("#{table}.id is null").delete_all
    end

    # real delete of dangling active storage objects

    # vacuum full groups;
    # vacuum full memberships;
    # vacuum full membership_requests;
    # vacuum full discussions;
    # vacuum full discussion_readers;
    # vacuum full search_vectors;
    # vacuum full comments;
    # vacuum full polls;
    # vacuum full poll_options;
    # vacuum full stances;
    # vacuum full stance_choices;
    # vacuum full outcomes;
    # vacuum full events;
    # vacuum full notifications;
    # vacuum full versions;
    # vacuum full ahoy_events;
    # vacuum full ahoy_visits;
  end

  task generate_error: :environment do
    raise "this is an exception to test exception handling"
  end

  task publish_system_notice: :environment do
    MessageChannelService.publish_system_notice(ENV['LOOMIO_SYSTEM_NOTICE'])
  end

  task update_subscription_members_counts: :environment do
    SubscriptionService.update_member_counts
  end

  task refresh_expiring_chargify_management_links: :environment do
    # run this once a week
    if Date.today.sunday?
      SubscriptionService.delay.refresh_expiring_management_links
    end
  end

  task populate_chargify_management_links: :environment do
    if Date.today.sunday?
      SubscriptionService.delay.populate_management_links
    end
  end

end
