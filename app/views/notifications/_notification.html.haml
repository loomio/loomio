- begin
  - if notification.event_kind == "new_discussion"
    - discussion = notification.discussion
    - person = discussion.author.name
    - action_text = "started a new discussion"
    - title_text = discussion.title
    - group_name = discussion.group_full_name
    - href = discussion_path(discussion)

  - elsif notification.event_kind == "new_comment"
    - comment = notification.comment
    - person = comment.user.name
    - action_text = "commented on the discussion"
    - title_text = comment.discussion.title
    - group_name = comment.group_full_name
    - href = discussion_path(comment.discussion)

  - elsif notification.event_kind == "new_motion"
    - motion = notification.motion
    - person = motion.author.name
    - action_text = "created a new proposal"
    - title_text = motion.name
    - group_name = motion.group_full_name
    - href = discussion_path(motion.discussion)

  - elsif notification.event_kind == "new_vote"
    - vote = notification.vote
    - person = vote.user_name
    - action_text = "#{Vote::POSITION_VERBS[vote.position]} on the proposal"
    - title_text = vote.motion_name
    - group_name = vote.group_full_name
    - href = discussion_path(vote.discussion, :proposal => vote.motion.id)

  - elsif notification.event_kind == "motion_blocked"
    - vote = notification.vote
    - person = vote.user_name
    - action_text = "blocked the proposal"
    - title_text = vote.motion_name
    - group_name = vote.group_full_name
    - href = discussion_path(vote.discussion, :proposal => vote.motion.id)

  - elsif notification.event_kind == "membership_requested"
    - membership = notification.membership
    - person = membership.user_name
    - action_text = "requested membership to"
    - title_text = membership.group_full_name
    - group_name = membership.group_full_name
    - href = group_path(membership.group)

  - elsif notification.event_kind == "user_added_to_group"
    - membership = notification.membership
    - person = membership.inviter_name ? membership.inviter_name : "Someone"
    - action_text = "added you to the group"
    - title_text = membership.group_full_name
    - group_name = membership.group_full_name
    - href = group_path(membership.group)

  - elsif notification.event_kind == "comment_liked"
    - comment_vote = notification.comment_vote
    - person = comment_vote.user_name
    - action_text = "liked your comment in the discussion"
    - title_text = comment_vote.discussion_title
    - group_name = comment_vote.group_full_name
    - href = discussion_path(comment_vote.discussion)

  - date = time_ago_in_words(notification.created_at)
  - class_name = notification.viewed_at.nil? ? " unread" : ""

  %li.selector-item{:class => "notification-item#{class_name}" }
    %a{:href => href }
      %span.bold-name= person
      = " #{action_text} "
      - if title_text
        %span.bold-name= truncate(title_text, :length => 80, :omission => '...')
      %span.notification-item-footer
        = "#{date} ago Â· #{group_name}"
  %li.divider

- rescue => exception
  - logger.error("NOTIFICATION ERROR: It looks like something got deleted without it's corresponding events/notifications being deleted as well. notification_id: #{notification.id}")
  -# TODO: Once we sort out a better deleting system for groups (https://trello.com/c/ll1na7KL) we should change this to a proper exception notification
  -#       so we know if there are any lingering notifications hanging around that shouldn't exist
  -#- ExceptionNotifier::Notifier.exception_notification(request.env, exception,
    -#:data => {:notification_id => notification.id, :message => "This error most likely means that something got deleted without it's corresponding events/notifications being deleted as well notification_id: #{notification.id}").deliver


