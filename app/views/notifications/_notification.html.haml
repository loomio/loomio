- begin
  - item = NotificationItem.new(notification).item
  - user = item.actor
  - action_text = item.action_text
  - title_text = item.title
  - group_name = item.group_full_name
  - href = item.link
  - avatar = item.avatar

  - date = time_ago_in_words(notification.created_at)
  - class_name = notification.viewed_at.nil? ? " unread" : ""

  %li.selector-item{:class => "notification-item#{class_name}", :id => "notification-#{notification.id}" }
    %a{:href => href }
      = render 'avatar', user: avatar, size: "medium", kind: nil, id: nil
      %span.notification-content
        - unless notification.event_kind == "motion_closing_soon" || (notification.event_kind == "motion_closed" && user.nil?)
          %span.bold-name= user.name
        = " #{action_text} "
        - if title_text
          %span.bold-name= truncate(title_text, :length => 80, :omission => '...')
        %span.notification-item-footer
          = "#{t(:ago, :quantity_of_time => date)} Â· #{group_name}"

- rescue => exception
  - logger.error("NOTIFICATION ERROR: It looks like something got deleted without it's corresponding events/notifications being deleted as well. notification_id: #{notification.id}\n#{exception}")
  / TODO: Once we sort out a better deleting system for groups (https://trello.com/c/ll1na7KL) we should change this to a proper exception notification so we know if there are any lingering notifications hanging around that shouldn't exist
  / - ExceptionNotifier::Notifier.exception_notification(request.env, exception,
  /   :data => {:notification_id => notification.id, :message => "This error most likely means that something got deleted without it's corresponding events/notifications being deleted as well notification_id: #{notification.id}").deliver


